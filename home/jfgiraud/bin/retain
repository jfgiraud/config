#!/bin/bash

 
usage() {
	cat <<-EOF
NAME:

        $0 - retains lines of files and print on the standard output

SYNOPSYS:

        $0 not-blank [ FILE ... ]
        retains not blank lines

        $0 odd [ FILE ... ]
        retains odd lines

        $0 even [ FILE ... ]
        retains even lines

        $0 every-nth <pos> <nth> [ FILE ... ]
        retains every <nth> lines starting at <pos>

        $0 contain <word> [ FILE ... ]
        retains lines containing <word>

        $0 ! contain <word> [ FILE ... ]
        retains lines not containing <word>


With no FILE, or when FILE is -, read standard input.

AUTHOR
        Written by Jean-François Giraud.

COPYRIGHT
        Copyright © 2013 Jean-François Giraud.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
        This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

EOF
	exit 0
}

error() {
    STATUS="$1"
    MSG="$2"
    cat >&2 <<-EOF
${0##*/}: $MSG
Try \`${0##*/} -h\` for more information.
EOF
    exit 1
}


if [ $# -eq 0 ]; then
    usage
fi

if [ "$1" == "!" ]; then
    prefix="not-"
    shift
else
    prefix=""
fi

command="$prefix$1"

shift

if [ "$command" == "not-blank" ]; then
    sed -e 's/^[[:space:]]*$//;/^$/d' $*
elif [ "$command" == "odd" ]; then
    start=1
    nth=2
    sed -n "${start}~${nth}p" $*
elif [ "$command" == "even" ]; then
    start=2
    nth=2
    sed -n "${start}~${nth}p" $*
elif [ "$command" == "every-nth" ]; then
    start="$1"
    nth="$2"
    shift 2
    sed -n "${start}~${nth}p" $*
elif [ "$command" == "contain" ]; then
    word="$1"
    shift 
    grep "$word" $*
elif [ "$command" == "not-contain" ]; then
    word="$1"
    shift 
    grep -v "$word" $*
else 
    error 1 "Unknown command '$command'"
fi

